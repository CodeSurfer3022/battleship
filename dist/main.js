!function(n){var i={};function t(o){if(i[o])return i[o].exports;var l=i[o]={i:o,l:!1,exports:{}};return n[o].call(l.exports,l,l.exports,t),l.l=!0,l.exports}t.m=n,t.c=i,t.d=function(n,i,o){t.o(n,i)||Object.defineProperty(n,i,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,i){if(1&i&&(n=t(n)),8&i)return n;if(4&i&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&i&&"string"!=typeof n)for(var l in n)t.d(o,l,function(i){return n[i]}.bind(null,l));return o},t.n=function(n){var i=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(i,"a",i),i},t.o=function(n,i){return Object.prototype.hasOwnProperty.call(n,i)},t.p="",t(t.s=2)}([function(module,exports){eval("function Player() {\n    const attack = (board, position) => {\n        board.receiveAttack(position);\n    }\n    return {attack}\n}\n\nmodule.exports = Player;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9GYWN0b3JpZXMvUGxheWVyLmpzP2I5NTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIFBsYXllcigpIHtcbiAgICBjb25zdCBhdHRhY2sgPSAoYm9hcmQsIHBvc2l0aW9uKSA9PiB7XG4gICAgICAgIGJvYXJkLnJlY2VpdmVBdHRhY2socG9zaXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4ge2F0dGFja31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQbGF5ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval("function Ship(positions) {\n    const positionsHealth = {};\n    positions.forEach(position => positionsHealth[position] = 1);\n\n    const getPositions = () => positionsHealth;\n\n    const hit = (position) => {\n        positionsHealth[position] = 0;\n    }\n    const isSunk = () => {\n        return Object.values(positionsHealth).every(health => health === 0)\n    }\n    return {hit, isSunk, getPositions};\n}\n\nmodule.exports = Ship;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9GYWN0b3JpZXMvU2hpcC5qcz9mM2Y5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIFNoaXAocG9zaXRpb25zKSB7XG4gICAgY29uc3QgcG9zaXRpb25zSGVhbHRoID0ge307XG4gICAgcG9zaXRpb25zLmZvckVhY2gocG9zaXRpb24gPT4gcG9zaXRpb25zSGVhbHRoW3Bvc2l0aW9uXSA9IDEpO1xuXG4gICAgY29uc3QgZ2V0UG9zaXRpb25zID0gKCkgPT4gcG9zaXRpb25zSGVhbHRoO1xuXG4gICAgY29uc3QgaGl0ID0gKHBvc2l0aW9uKSA9PiB7XG4gICAgICAgIHBvc2l0aW9uc0hlYWx0aFtwb3NpdGlvbl0gPSAwO1xuICAgIH1cbiAgICBjb25zdCBpc1N1bmsgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHBvc2l0aW9uc0hlYWx0aCkuZXZlcnkoaGVhbHRoID0+IGhlYWx0aCA9PT0gMClcbiAgICB9XG4gICAgcmV0dXJuIHtoaXQsIGlzU3VuaywgZ2V0UG9zaXRpb25zfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGlwOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"opponentBoard\", function() { return /* binding */ opponentBoard; });\n__webpack_require__.d(__webpack_exports__, \"selfBoard\", function() { return /* binding */ selfBoard; });\n__webpack_require__.d(__webpack_exports__, \"selfBoardDiv\", function() { return /* binding */ selfBoardDiv; });\n\n// CONCATENATED MODULE: ./src/modules/Factories/GameBoard.js\nconst Ship = __webpack_require__(1);\n\nfunction GameBoard() {\n    const boardArray = [];\n    let ships = [];\n\n    // Initialize an empty board of size 10 * 10\n    for(let i = 0; i < 100; i ++) {\n        boardArray.push(undefined);\n    }\n\n    const placeShip = (index, positions) => {\n        if(positions.every(position => boardArray[position] === undefined)) {\n            const ship = Ship(positions);\n            positions.forEach(position => boardArray[position] = index);\n            ships.push(ship);\n        } else {\n            console.log(\"one or more positions are occupied\")\n        }\n    }\n\n    const removeAllShips = () => {\n        for(let i = 0; i < 100; i ++) {\n            boardArray[i] = undefined;\n            ships.length = 0;\n        }\n    }\n\n    const updateShip = (index, oldPositions, newPositions) => {\n        // remove ship from old position\n        oldPositions.forEach(position => boardArray[position] = undefined);\n\n        ships.forEach(ship => console.log(ship.getPositions()));\n        // replace old ship with new ship\n        ships[index] = Ship(newPositions);\n\n        ships.forEach(ship => console.log(ship.getPositions()));\n        // place this ship on the boardArray\n        newPositions.forEach(position => boardArray[position] = index);\n    }\n\n    const receiveAttack = (position) => {\n        if(boardArray[position] === undefined) {\n            boardArray[position] = 'miss';\n        } else if (boardArray[position] !== 'miss' && boardArray[position] !== 'hit'){\n            const index = boardArray[position];\n            const hitShip = ships[index];\n            hitShip.hit(position);\n            boardArray[position] = 'hit';\n        }\n    }\n\n    const allShipsSunk = () => {\n        return ships.every(ship => ship.isSunk());\n    }\n\n    return {\n        boardArray,\n        ships,\n        placeShip,\n        removeAllShips,\n        updateShip,\n        receiveAttack,\n        allShipsSunk\n    }\n}\n\n/* harmony default export */ var Factories_GameBoard = (GameBoard);\n\n// CONCATENATED MODULE: ./src/modules/DomManipulation/BoardDisplay.js\nfunction renderBoard(boardArray, boardDiv) {\n\n    boardArray.forEach( (value, index = 0) => {\n        const cell = document.createElement('div');\n        cell.classList.add('cell');\n        cell.setAttribute('data-key', index);\n        boardDiv.appendChild(cell);\n    })\n}\n\n/* harmony default export */ var BoardDisplay = (renderBoard);\n// EXTERNAL MODULE: ./src/modules/Factories/Player.js\nvar Player = __webpack_require__(0);\nvar Player_default = /*#__PURE__*/__webpack_require__.n(Player);\n\n// CONCATENATED MODULE: ./src/modules/ComputerAttack.js\n\n\nfunction validatePosition(direction, hit, position) {\n    // check if the position is on the board\n    if(position < 0 || position > 99) return undefined;\n\n    // check if on the same row, because rows are wrapped\n    if(direction === 'left' || direction === 'right') {\n        const hitRow = Math.floor(hit / 10);\n        const positionRow = Math.floor(position / 10);\n        if(hitRow !== positionRow) return undefined;\n    }\n\n    // check if position had already been attacked\n    let nextPosition = position\n    let cellValue = selfBoard.boardArray[nextPosition];\n    while(cellValue === 'miss' || cellValue === 'hit') {\n        nextPosition = getPositionBasedOnHit(position, direction);\n        cellValue = selfBoard.boardArray[nextPosition];\n    }\n    return nextPosition;\n}\n\nfunction getPositionBasedOnHit(hit, direction) {\n    let position;\n    switch (direction) {\n        case 'up':\n            position = hit - 10;\n            break;\n\n        case 'down':\n            position = hit + 10;\n            break;\n\n        case 'left':\n            position = hit - 1;\n            break;\n\n        case 'right':\n            position = hit + 1;\n    }\n    return validatePosition(direction, hit, position);\n}\n\nfunction getRandomPosition() {\n    let position = Math.floor(Math.random() * 100);\n    let cellValue = selfBoard.boardArray[position];\n    while(cellValue === 'miss' || cellValue === 'hit') {\n        position = Math.floor(Math.random() * 100);\n        cellValue = selfBoard.boardArray[position];\n    }\n    return position;\n}\n\nfunction ComputerAttack() {\n    let hit;\n    let directions = ['up', 'down', 'left', 'right'];\n\n    const updateHits = (position) => {\n        hit = position;\n    }\n\n    const updateMiss = () => {\n        if(!hit) return;\n        directions.shift();\n\n        // If we've checked in all directions, setup variables for next hit\n        if(directions.length === 0) {\n            hit = undefined;\n            directions = ['up', 'down', 'left', 'right'];\n        }\n    }\n\n    const getComputerAttackPosition = () => {\n        if(hit) {\n            console.log('inside ' + hit + directions);\n\n            // get a valid position i.e on board and on same column for vertical ships\n            let position =  getPositionBasedOnHit(hit, directions[0]);\n            while (!position) {\n                directions.shift();\n                if(directions.length === 0) {\n                    hit = undefined;\n                    directions = ['up', 'down', 'left', 'right'];\n                    return getRandomPosition();\n                }\n                position = getPositionBasedOnHit(hit, directions[0]);\n            }\n            return position;\n        }\n        return getRandomPosition();\n    }\n\n    return {getComputerAttackPosition, updateMiss, updateHits};\n}\n\n/* harmony default export */ var modules_ComputerAttack = (ComputerAttack);\n// CONCATENATED MODULE: ./src/modules/GameLoop.js\n\n\n\n\nconst human = Player_default()();\nconst computer = Player_default()();\nconst computerAttack = modules_ComputerAttack();\n\nfunction playRound(e) {\n    if(selfBoard.allShipsSunk() || opponentBoard.allShipsSunk()) {\n        const winner = opponentBoard.allShipsSunk() ? 'human' : 'computer';\n        console.log(`winner is ${winner}`);\n        return;\n    }\n    // human's attack on computer\n    let cell = e.target;\n    let position = cell.getAttribute('data-key');\n\n    // Don't play round if user attacks already attacked position\n    if([...cell.classList].includes('hit') || [...cell.classList].includes('miss')) return;\n\n    attack(human, opponentBoard, cell, position);\n\n    // computer's attack on human\n    position = computerAttack.getComputerAttackPosition();\n    console.log(position);\n    cell = selfBoardDiv.querySelector(`div[data-key=\"${position}\"]`);\n\n    const computerResult = attack(computer, selfBoard, cell, position);\n    console.log(computerResult);\n\n    // Update hits and misses so computer can make intelligent guesses next time\n    if(computerResult === 'hit') {\n        computerAttack.updateHits(position);\n    } else {\n        computerAttack.updateMiss(position);\n    }\n}\n\nfunction attack(player, board, cell, position){\n    player.attack(board, position);\n    const result = board.boardArray[position];\n    if (result === 'miss') {\n        cell.classList.add('miss');\n    } else if (result === 'hit'){\n        cell.classList.add('hit');\n    }\n    return result;\n}\n\n/* harmony default export */ var GameLoop = (playRound);\n// CONCATENATED MODULE: ./src/modules/DomManipulation/ShipPlacement.js\nfunction checkValidHorizontalPosition(unaivalablePositions, position, size) {\n    const row = Math.floor(position / 10);\n    const end = (row + 1) * 10;\n\n    // checking if last position will be in the same row\n    if(position + size - 1 >= end) {\n        return false\n    }\n\n    // check if all positions with this starting position are available\n    for(let i = 0; i < size; i ++) {\n        position ++;\n        if(unaivalablePositions.includes(position)) return false;\n    }\n\n    return true;\n}\n\nfunction checkValidVerticalPosition(unaivalablePositions, position, size) {\n    const col = position % 10;\n    const end = col + 90;\n\n    // checking if last position will be in the same column\n    if(position + (size - 1) * 10 > end) {\n        return false;\n    }\n\n    // check if all positions with this starting position are available\n    for(let i = 0; i < size; i ++) {\n        position += 10;\n        if(unaivalablePositions.includes(position)) return false;\n    }\n\n    return true;\n}\n\nfunction isvalidPosition(unaivalablePositions ,position, size, orientation) {\n    if(unaivalablePositions.includes(position)) return false;\n\n    if(orientation === 'horizontal') {\n        return checkValidHorizontalPosition(unaivalablePositions, position, size);\n    } else {\n        return checkValidVerticalPosition(unaivalablePositions, position, size);\n    }\n}\n\nfunction getValidPosition(unavailablePositions, size, orientation) {\n    let position = Math.floor(Math.random() * 100);\n    while(!isvalidPosition(unavailablePositions, position, size, orientation))\n    {\n        position = Math.floor(Math.random() * 100);\n    }\n    return position;\n}\n\nfunction makeShips() {\n    const unavailablePositions = [];\n    const ships = [];\n    const orientations = [];\n    // let's make 5 ships of sizes 1 to 5\n    for(let size = 1; size <= 5; size ++) {\n        let orientation = size % 2 ? 'vertical' : 'horizontal';\n        orientations.push(orientation);\n\n        let ship = [];\n        let position = getValidPosition(unavailablePositions, size, orientation);\n        for(let i = 0; i < size; i ++) {\n            ship.push(position);\n            unavailablePositions.push(position);\n            if(orientation === 'vertical') {\n                position += 10;\n            } else {\n                position ++;\n            }\n        }\n        ships.push(ship);\n    }\n    console.log(ships, orientations);\n    return {ships, orientations};\n}\n\nconst shipPlacement = {\n    randomPlacement(board) {\n        const {ships, orientations} = makeShips();\n        ships.forEach((ship, index= 0 )=> {\n            board.placeShip(index, ship);\n        });\n        return {ships, orientations};\n    },\n    removeShips(board) {\n        board.removeAllShips();\n    }\n}\n\n/* harmony default export */ var ShipPlacement = (shipPlacement);\n\n// CONCATENATED MODULE: ./src/modules/DomManipulation/ShipDivPlacement.js\n\n\nfunction styleShip(ship, orientation, start, end) {\n    if(orientation === 'vertical') {\n        ship.setAttribute('data-top', start);\n        ship.setAttribute('data-bottom', end);\n    } else {\n        ship.setAttribute('data-left', start);\n        ship.setAttribute('data-right', end);\n    }\n    const topOffset = Math.floor(start/ 10);\n    const leftOffset = start % 10;\n\n    ship.style.top = `${topOffset * 42}px`;\n    ship.style.left = `${leftOffset * 42}px`;\n}\n\nfunction makeShipDiv(orientation, shipNum, length) {\n    const div = document.createElement('div');\n    div.classList.add('ship');\n    div.draggable = true;\n    div.classList.add(orientation);\n    div.setAttribute('data-ship', shipNum);\n    div.setAttribute('data-length', length);\n    if(orientation === 'vertical') {\n        div.style.width = '40px';\n        div.style.height = `${40 * length}px`;\n    } else {\n        div.style.height = '40px';\n        div.style.width = `${40 * length}px`;\n    }\n    return div;\n}\n\nfunction placeShipDivs(container, shipNum, orientation, length, start, end) {\n    const ship = makeShipDiv(orientation, shipNum, length);\n    styleShip(ship, orientation, start, end);\n    container.appendChild(ship);\n}\n\nfunction placeAllShipDivs(ships, orientations) {\n    ships.forEach((ship, index= 0 )=> {\n        const length = ship.length;\n        const start = ship[0];\n        const end = ship[length - 1];\n        placeShipDivs(selfBoardDiv, `${index}`, orientations[index], length, start, end);\n    });\n}\n\nfunction removeAllShipDivs() {\n    const shipDivs = document.querySelectorAll('.ship');\n    shipDivs.forEach(shipDiv => selfBoardDiv.removeChild(shipDiv));\n}\n\n\n\n// CONCATENATED MODULE: ./src/modules/DomManipulation/ShipDivMovementHandler.js\n\n\n\nfunction moveShipDiv(ship, cell, orientation, length) {\n    if(orientation === 'vertical') {\n        const newBottom = cell.getAttribute('data-key');\n        const newTop = newBottom - (length - 1) * 10;\n        if(newTop < 0) return;\n\n        styleShip(ship, 'vertical', newTop, newBottom);\n    } else {\n        const newRight = cell.getAttribute('data-key');\n        const row = Math.floor(newRight / 10);\n        const newLeft = newRight - (length - 1);\n        if(newLeft < row * 10) return;\n\n        styleShip(ship, 'horizontal', newLeft, newRight);\n    }\n}\n\nfunction getPositionsFromShipDiv(orientation, length, end) {\n    const positions = [];\n    let position = end;\n\n    const decrement = orientation === 'vertical' ? 10 : 1;\n\n    for(let i = 0; i < length; i ++) {\n        positions.push(position);\n        position -= decrement;\n    }\n    return positions;\n}\n\nfunction areValidPositions(newPositions, oldPositions) {\n    return newPositions.every(newPosition => {\n        // each position must either be empty or one of previous positions\n        return (selfBoard.boardArray[newPosition] === undefined\n                || oldPositions.includes(newPosition)\n        )\n    });\n}\n\n\n// CONCATENATED MODULE: ./src/modules/DomManipulation/ShipDivMovement.js\n\n\n\n// draggable event listeners\nfunction shipDivListeners() {\n    const shipDivs = selfBoardDiv.querySelectorAll('.ship');\n    shipDivs.forEach(ship => ship.addEventListener('dragstart', dragStart));\n    shipDivs.forEach(ship => ship.addEventListener('dragend', dragEnd));\n}\n\n// cell event listeners\nfunction cellListeners() {\n    const cells = selfBoardDiv.querySelectorAll('.cell');\n    cells.forEach(cell => cell.addEventListener('dragover', dragOver));\n    cells.forEach(cell => cell.addEventListener('dragenter', dragEnter));\n    cells.forEach(cell => cell.addEventListener('dragleave', dragLeave));\n    cells.forEach(cell => cell.addEventListener('drop', dragDrop));\n}\n\nfunction addDragEventListeners() {\n    shipDivListeners();\n    cellListeners();\n}\n\nfunction removeDragEventListeners() {\n    const ships = selfBoardDiv.querySelectorAll('.ship');\n    const cells = selfBoardDiv.querySelectorAll('.cell');\n    // draggable event listeners\n    ships.forEach(ship => ship.removeEventListener('dragstart', dragStart));\n    ships.forEach(ship => ship.removeEventListener('dragend', dragEnd));\n\n    // cell event listeners\n    cells.forEach(cell => cell.removeEventListener('dragover', dragOver));\n    cells.forEach(cell => cell.removeEventListener('dragenter', dragEnter));\n    cells.forEach(cell => cell.removeEventListener('dragleave', dragLeave));\n    cells.forEach(cell => cell.removeEventListener('drop', dragDrop));\n}\n\n// Dragging functions\n\nfunction dragStart(e) {\n    console.log('start');\n    const shipNum = this.getAttribute('data-ship');\n    e.dataTransfer.setData(\"text\", shipNum);\n    setTimeout(() => this.classList.add('hidden'), 0);\n}\n\nfunction dragEnd() {\n    console.log('end');\n    this.classList.remove('hidden');\n}\n\nfunction dragOver(e) {\n    console.log('over');\n    e.preventDefault();\n}\n\nfunction dragEnter() {\n    console.log('enter');\n    this.classList.add('hovered');\n}\n\nfunction dragLeave() {\n    console.log('leave');\n    this.className = 'cell';\n}\n\nfunction dragDrop(e) {\n    console.log('drop');\n    e.preventDefault();\n    const data = e.dataTransfer.getData(\"text\");\n    console.log(data);\n    this.className = 'cell';\n    const ship = selfBoardDiv.querySelector(`.ship[data-ship='${data}']`);\n    const cell = this;\n    console.log(ship, cell);\n    handleDrop(ship, cell);\n}\n\nfunction handleDrop(ship, cell) {\n    // move the div\n    const orientation = [...ship.classList].includes('horizontal') ? 'horizontal' : 'vertical';\n    const length = ship.getAttribute('data-length');\n\n    // get old end and positions\n    const oldEnd = orientation === 'horizontal' ?\n        parseInt(ship.getAttribute('data-right'))\n        : parseInt(ship.getAttribute('data-bottom'));\n    const oldPositions = getPositionsFromShipDiv(orientation, length, oldEnd);\n    console.log(oldEnd, oldPositions);\n\n    // check if moving this div will cause any of the positions to overlap\n    const newEnd = parseInt(cell.getAttribute('data-key'));\n    const newPositions = getPositionsFromShipDiv(orientation, length, newEnd);\n\n    if(!areValidPositions(newPositions, oldPositions)) return;\n    console.log(newEnd, newPositions);\n\n    moveShipDiv(ship, cell, orientation, length);\n\n    const shipIndex = parseInt(ship.getAttribute('data-ship'));\n    console.log(shipIndex, oldPositions, newPositions);\n    selfBoard.updateShip(shipIndex, oldPositions, newPositions);\n}\n\n\n\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\nconst selfBoard = Factories_GameBoard();\nconst opponentBoard = Factories_GameBoard();\n\nconst selfBoardDiv = document.querySelector('#self');\nconst opponentBoardDiv = document.querySelector('#opponent');\n/******************************************************************************************\n * placement of ships\n *******************************************************************************************/\nlet {ships: src_ships, orientations: src_orientations} = ShipPlacement.randomPlacement(selfBoard);\nplaceAllShipDivs(src_ships, src_orientations);\n\nShipPlacement.randomPlacement(opponentBoard, opponentBoardDiv);\n\nconsole.log(selfBoard);\nconsole.log(opponentBoard);\n\n/******************************************************************************************\n * display boards after ships are placed\n *******************************************************************************************/\n\nBoardDisplay(selfBoard.boardArray, selfBoardDiv);\nBoardDisplay(opponentBoard.boardArray, opponentBoardDiv);\n\naddDragEventListeners();\n\n\n/******************************************************************************************\n * handle events for randomize placement, reset game, start game\n *******************************************************************************************/\nconst gameControls = document.querySelector('#gameControls');\n\nconst randomButton = document.querySelector('#randomButton');\nrandomButton.addEventListener('click', () => {\n    ShipPlacement.removeShips(selfBoard);\n    removeAllShipDivs();\n\n    console.log(selfBoard.boardArray, selfBoard.ships);\n    let res = ShipPlacement.randomPlacement(selfBoard);\n    placeAllShipDivs(res.ships, res.orientations);\n    shipDivListeners();\n    console.log(selfBoard.boardArray, selfBoard.ships);\n\n});\n\nconst startButton = document.querySelector('#startButton');\nstartButton.addEventListener('click', () => {\n    opponentBoardDiv.addEventListener('click', GameLoop);\n    removeDragEventListeners();\n    gameControls.classList.add('hidden');\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}]);