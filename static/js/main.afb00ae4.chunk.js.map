{"version":3,"sources":["Factories/Player.js","Components/GameRibbon.js","Components/Cell.js","Helpers/styleShip.js","Components/Ship.js","Components/GameBoard.js","Helpers/ShipDivMovementHandler.js","Components/GameBoardContainer.js","Helpers/dragFunctions.js","Factories/Ship.js","Factories/Board.js","Helpers/makeShips.js","Players.js","PlayersContext.js","Helpers/computerAttack.js","Components/PlayArea.js","Components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","name","attack","opponent","position","board","receiveAttack","GameRibbon","props","turn","winner","attackResult","resultMsg","banner","className","Cell","status","value","index","dragOver","dragEnter","dragLeave","dragDrop","data-key","onDragOver","onDragEnter","onDragLeave","onDrop","getOffsets","start","cellSize","topOffset","Math","floor","leftOffset","Ship","ship","positions","length","orientation","dragStart","dragEnd","end","style","top","left","width","height","styleShip","data-ship","data-length","data-start","data-end","draggable","onDragStart","onDragEnd","GameBoard","player","boardValues","ships","playRound","dragFunctions","pause","cells","map","e","shipDivs","onClick","getPositionsFromShipDiv","increment","i","push","handleDrop","cell","classList","includes","getAttribute","console","log","oldEnd","parseInt","oldPositions","newStart","newPositions","playerBoard","areValidPositions","every","newPosition","undefined","arePositionsOnBoard","some","inline","setAttribute","updateShipDivData","shipIndex","updateShip","event","target","setTimeout","add","remove","preventDefault","data","dataTransfer","getData","numbers","GameBoardContainer","positionsHealth","forEach","hit","isSunk","Object","values","health","getPositions","getOrientation","getPositionsHealth","getLength","Board","isPositionHit","isPositionMiss","isPositionAttacked","placeAllShips","shipsArr","placeShip","areAllShipsSunk","orientations","isvalidPosition","unavailablePositions","size","checkValidHorizontalPosition","checkValidVerticalPosition","getValidPosition","random","makeShips","Player","computer","computerBoard","playerShips","computerShips","initialValues","PlayersContext","createContext","PlayersProvider","useState","setBoardValues","Provider","children","getPositionBasedOnHit","direction","isValidPosition","getRandomPosition","computerAttack","directions","getAttackPosition","shift","updateMiss","updateHits","PlayArea","useContext","newBoardValues","slice","Main","App","icon","faHeart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afb00ae4.chunk.js","sourcesContent":["function Player(name) {\n    const attack = (opponent, position) => {\n        opponent.board.receiveAttack(position);\n    }\n    return {name, attack}\n}\n\nmodule.exports = Player;\n","import React from \"react\";\nimport './GameRibbon.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faInfoCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction GameRibbon(props) {\n  const {turn, opponent, winner, attackResult} = props;\n  const resultMsg = attackResult ? attackResult ? \"hit\" : \"miss\" : '';\n  const msgP = resultMsg !== '' ?<p>{turn.name === 'Player' ? 'You' : turn.name} shoot into {opponent.name}'s water and {resultMsg}</p> : null;\n\n\n  const banner = winner ? <div className=\"banner\">\n    <h2>{winner.name} won</h2>\n  </div> :  <div className=\"banner\">\n    <h2>{turn.name}'s Turn</h2>\n  </div>;\n\n  return(\n    <div className=\"game-ribbon\">\n      {/*<button>Start</button>*/}\n      {/*<button>Shuffle Ships</button>*/}\n      {/*<FontAwesomeIcon icon={faInfoCircle}/>*/}\n      {/*<p className=\"info__text hidden\">You can move your ships around, note that the higlighted cell*/}\n      {/*  will be the ending position i.e bottom/right end of a ship</p>*/}\n\n      {banner}\n    </div>\n  )\n}\n\nexport default GameRibbon;\n","import React from \"react\";\nimport \"./Cell.css\";\n\nfunction Cell(props) {\n  let status='';\n  const {value, index, dragOver, dragEnter, dragLeave, dragDrop} = props;\n\n  if(value === 'miss' || value === 'hit') {\n    status = value;\n  }\n\n  return(\n    <div className={`cell ${status}`}\n         data-key={index}\n         onDragOver={dragOver}\n         onDragEnter={dragEnter}\n         onDragLeave= {dragLeave}\n         onDrop= {dragDrop}\n    >\n\n    </div>\n  )\n\n}\n\nexport default Cell;\n\n\n\n\n\n","function getOffsets(start, cellSize=40) {\n  let  topOffset = Math.floor(start/ 10);\n  topOffset *= cellSize;\n\n  let leftOffset = start % 10;\n  leftOffset *= cellSize;\n\n  return {topOffset, leftOffset};\n}\n\nfunction styleShip(start, orientation, length, cellSize = 40) {\n  const style = {position: 'absolute'};\n\n  const {topOffset, leftOffset} = getOffsets(start, cellSize);\n  style.top = `${topOffset}px`;\n  style.left = `${leftOffset}px`;\n\n  if(orientation === 'vertical') {\n    style.width = `${cellSize}px`;\n    style.height = `${cellSize * length}px`;\n  } else {\n    style.height = `${cellSize}px`;\n    style.width = `${cellSize * length}px`;\n  }\n\n  return style;\n}\n\nexport {styleShip, getOffsets};\n","import React from \"react\";\nimport \"./Ship.css\";\n\nimport {styleShip} from \"../Helpers/styleShip\";\n\nfunction Ship(props){\n  const {positions,length, orientation} = props.ship;\n  const {dragStart, dragEnd} = props;\n\n  const start = positions[0];\n  const end = positions[length - 1];\n\n  const style = styleShip(start, orientation, length);\n\n  return(\n    <div className={`ship ${orientation}`}\n         data-ship={props.index}\n         data-length={length}\n         data-start={start}\n         data-end={end}\n         style={style}\n         draggable=\"true\"\n         onDragStart={dragStart}\n         onDragEnd={dragEnd}\n    >\n\n    </div>\n  )\n}\n\nexport default Ship;\n","import React from \"react\";\nimport \"./GameBoard.css\";\n\nimport Cell from \"./Cell\";\nimport Ship from \"./Ship\";\n\nfunction GameBoard(props) {\n  const {player, boardValues, ships, playRound, turn, dragFunctions} = props;\n\n  const pause = turn !== player ? '' : 'pause';\n\n  const cells = boardValues.map((value, index = 0) =>\n    <Cell key={index}\n          value={value}\n          index={index}\n          dragOver={dragFunctions.dragOver}\n          dragEnter={dragFunctions.dragEnter}\n          dragLeave={dragFunctions.dragLeave}\n          dragDrop={(e) => dragFunctions.dragDrop(e, player)}\n    />);\n\n  const shipDivs = player.name === 'Player' ? ships.map((ship, index) =>\n    <Ship key={index}\n          index={index}\n          ship={ship}\n          dragStart={dragFunctions.dragStart}\n          dragEnd={dragFunctions.dragEnd}\n    />) : null;\n\n  return(\n    <div className={`game-board ${player.name} ${pause}`} onClick={playRound}>\n      {cells}\n      {shipDivs}\n    </div>\n  )\n}\n\nexport default GameBoard;\n","import {getOffsets} from \"./styleShip\";\n\nfunction updateShipDivData(ship, start, end) {\n  ship.setAttribute('data-start', start);\n  ship.setAttribute('data-end', end);\n}\n\nfunction getPositionsFromShipDiv(orientation, length, start) {\n  const positions = [];\n  let position = start;\n\n  const increment = orientation === 'vertical' ? 10 : 1;\n\n  for (let i = 0; i < length; i++) {\n    positions.push(position);\n    position += increment;\n  }\n  return positions;\n}\n\nfunction areValidPositions(playerBoard, newPositions, oldPositions, orientation, start, end) {\n  // each position must either be empty or one of previous positions\n  const areValidPositions = newPositions.every(newPosition =>\n    playerBoard[newPosition] === undefined\n    || oldPositions.includes(newPosition));\n\n  console.log(areValidPositions);\n\n  // and none of the new positions are out of the board\n  const arePositionsOnBoard = !newPositions.some(newPosition => newPosition > 99 || newPosition < 0);\n  console.log(start, end);\n  console.log(arePositionsOnBoard)\n\n  // all positions are on the same row for horizontal ships\n  // and same column for vertical ships\n  let inline =  orientation === 'horizontal' ? Math.floor(start/10) === Math.floor(end/10)\n    : start % 10 === end % 10;\n  console.log(inline);\n\n  return areValidPositions && arePositionsOnBoard && inline;\n\n}\n\nfunction handleDrop(player, ship, cell) {\n  // move the div\n  const orientation = [...ship.classList].includes('horizontal') ? 'horizontal' : 'vertical';\n  const length = ship.getAttribute('data-length');\n\n  console.log(orientation, length);\n\n  // get old end and positions\n  const oldEnd = parseInt(ship.getAttribute('data-end'));\n  const oldPositions = getPositionsFromShipDiv(orientation, length, oldEnd);\n  console.log(oldEnd, oldPositions);\n\n  // check if moving this div will cause any of the positions to overlap\n  const newStart = parseInt(cell.getAttribute('data-key'));\n  const newPositions = getPositionsFromShipDiv(orientation, length, newStart);\n\n  if (!areValidPositions(player.board, newPositions, oldPositions, orientation,\n    newStart, newPositions[length - 1])) return;\n\n  console.log(newStart, newPositions);\n\n  // Now since the new positions are valid, we can move the ship\n  // div by styling it\n  updateShipDivData(ship, newPositions[0], newStart);\n  const {topOffset, leftOffset} = getOffsets(newPositions[0])\n  ship.style.top = `${topOffset}px`;\n  ship.style.left = `${leftOffset}px`;\n\n  const shipIndex = parseInt(ship.getAttribute('data-ship'));\n\n  // update ships info on player board\n  player.board.updateShip(shipIndex, oldPositions, newPositions);\n\n}\n\nexport default handleDrop;\n","import React from \"react\";\nimport \"./GameBoardContainer.css\";\nimport GameBoard from \"./GameBoard\";\nimport ShipsStatus from \"./ShipsStatus\";\nimport dragFunctions from \"../Helpers/dragFunctions\";\n\n// Numbers for sidetabs\nlet numbers = [];\nfor(let i = 0; i < 10; i++) numbers.push(<div className=\"number\" key={i}>\n  <p>{i}</p>\n</div>);\n\nfunction GameBoardContainer(props) {\n  const {player, boardValues, ships, playRound, turn} = props;\n\n  return(\n    <div className=\"gameboard-container\">\n      <div className=\"flex\">\n        <div className=\"side-tab\">\n          {numbers}\n        </div>\n        <div>\n          <GameBoard\n            turn={turn}\n            player={player}\n            boardValues={boardValues}\n            ships={ships}\n            playRound={playRound}\n            dragFunctions={dragFunctions}\n          />\n          <div className=\"bottom-tab\">\n            {numbers}\n          </div>\n        </div>\n      </div>\n      <div className=\"board-name\">\n        <h2>{player.name} Board</h2>\n      </div>\n\n      {/*<ShipsStatus />*/}\n    </div>\n  )\n}\n\nexport default GameBoardContainer;\n","// Dragging functions\nimport handleDrop from \"./ShipDivMovementHandler\";\n\nexport default (function () {\n  let ship;\n\n  // drag start and end events are on ship divs\n  function dragStart(event) {\n    console.log('start');\n    ship = event.target;\n    setTimeout(() => ship.classList.add('hidden'), 0);\n  }\n\n  function dragEnd(event) {\n    console.log('end');\n    event.target.classList.remove('hidden');\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////\n  function dragOver(event) {\n    console.log('over');\n    event.preventDefault();\n  }\n\n  function dragEnter(event) {\n    console.log('enter');\n    event.target.classList.add('hovered');\n  }\n\n  function dragLeave(event) {\n    console.log('leave');\n    event.target.className = 'cell';\n  }\n\n  function dragDrop(event, player) {\n    console.log('drop');\n    event.preventDefault();\n    const data = event.dataTransfer.getData(\"text\");\n    console.log(data);\n    const cell = event.target;\n    cell.className = 'cell';\n    console.log(ship, cell);\n    handleDrop(player, ship, cell);\n  }\n\n  return {dragStart, dragEnd, dragOver, dragEnter, dragLeave, dragDrop};\n})();\n\n\n","function Ship(positions, orientation) {\n    const positionsHealth = {};\n    const length = positions.length;\n    positions.forEach(position => positionsHealth[position] = 1);\n\n    const getPositions = () => positions;\n    const getOrientation = () => orientation;\n    const getLength = () => length;\n\n    const getPositionsHealth = () => positionsHealth;\n\n    const hit = (position) => {\n        positionsHealth[position] = 0;\n    }\n    const isSunk = () => {\n        return Object.values(positionsHealth).every(health => health === 0)\n    }\n    return {hit, isSunk, getPositions, getOrientation, getPositionsHealth, getLength,\n        positions, orientation, length, positionsHealth};\n}\n\nexport default Ship;\n","import Ship from \"./Ship\";\n\nfunction Board() {\n    const boardValues = [];\n    let ships = [];\n\n    // Initialize an empty boardValues of size 10 * 10\n    for(let i = 0; i < 100; i ++) {\n        boardValues.push(undefined);\n    }\n\n    const placeShip = (index, positions) => {\n        if(positions.every(position => boardValues[position] === undefined)) {\n            positions.forEach(position => boardValues[position] = index);\n        } else {\n            console.log(\"one or more positions are occupied\")\n        }\n    }\n\n    const updateShip = (index, oldPositions, newPositions) => {\n        // remove ship from old position\n        oldPositions.forEach(position => boardValues[position] = undefined);\n\n        ships.forEach(ship => console.log(ship.getPositions()));\n        // replace old ship with new ship\n        ships[index] = Ship(newPositions);\n\n        ships.forEach(ship => console.log(ship.getPositions()));\n        // place this ship on the boardArray\n        newPositions.forEach(position => boardValues[position] = index);\n    }\n\n    const placeAllShips = (shipsArr) => {\n        shipsArr.forEach((ship, index) => {\n            ships.push(ship);\n            placeShip(index, ship.positions)\n        });\n    }\n\n    const receiveAttack = (position) => {\n        if(boardValues[position] === undefined) {\n            boardValues[position] = 'miss';\n        } else if (boardValues[position] !== 'miss' && boardValues[position] !== 'hit'){\n            const index = boardValues[position];\n            const hitShip = ships[index];\n            hitShip.hit(position);\n            boardValues[position] = 'hit';\n        }\n    }\n\n    const isPositionAttacked = (position) => isPositionHit(position) || isPositionMiss(position);\n    const isPositionHit = (position) => boardValues[position] === 'hit';\n    const isPositionMiss = (position) => boardValues[position] === 'miss';\n\n    const areAllShipsSunk = () => {\n        return ships.every(ship => ship.isSunk());\n    }\n\n    return {\n        boardValues,\n        ships,\n        isPositionAttacked,\n        isPositionHit,\n        isPositionMiss,\n        placeAllShips,\n        updateShip,\n        receiveAttack,\n        areAllShipsSunk\n    }\n}\n\nexport default Board;\n","import Ship from '../Factories/Ship';\n\n// Global variables\nlet orientations = ['vertical', 'horizontal'];\nlet position, index;\n\nfunction checkValidHorizontalPosition(unavailablePositions, position, size) {\n  const row = Math.floor(position / 10);\n  const end = (row + 1) * 10;\n\n  // checking if last position will be in the same row\n  if(position + size - 1 >= end) {\n    return false\n  }\n\n  // check if all positions with this starting position are available\n  for(let i = 0; i < size; i ++) {\n    position ++;\n    if(unavailablePositions.includes(position)) return false;\n  }\n\n  return true;\n}\n\nfunction checkValidVerticalPosition(unavailablePositions, position, size) {\n  const col = position % 10;\n  const end = col + 90;\n\n  // checking if last position will be in the same column\n  if(position + (size - 1) * 10 > end) {\n    return false;\n  }\n\n  // check if all positions with this starting position are available\n  for(let i = 0; i < size; i ++) {\n    position += 10;\n    if(unavailablePositions.includes(position)) return false;\n  }\n\n  return true;\n}\n\nfunction isvalidPosition(unavailablePositions ,position, size, orientation) {\n  if(unavailablePositions.includes(position)) return false;\n\n  if(orientation === 'horizontal') {\n    return checkValidHorizontalPosition(unavailablePositions, position, size);\n  } else {\n    return checkValidVerticalPosition(unavailablePositions, position, size);\n  }\n}\n\nfunction getValidPosition(unavailablePositions, size, orientation) {\n  position = Math.floor(Math.random() * 100);\n  while(!isvalidPosition(unavailablePositions, position, size, orientation))\n  {\n    position = Math.floor(Math.random() * 100);\n  }\n  return position;\n}\n\nfunction getRandomOrientation() {\n  index = Math.floor(Math.random() * 2);\n  return orientations[index];\n}\n\nfunction makeShips() {\n  const unavailablePositions = [];\n  const ships = [];\n  // let's make 5 ships of sizes 1 to 5\n  for(let size = 1; size <= 5; size ++) {\n    let orientation = getRandomOrientation();\n    let positions = [];\n\n    let position = getValidPosition(unavailablePositions, size, orientation);\n    for(let i = 0; i < size; i ++) {\n      positions.push(position);\n      unavailablePositions.push(position);\n      if(orientation === 'vertical') {\n        position += 10;\n      } else {\n        position ++;\n      }\n    }\n\n    let ship = Ship(positions, orientation);\n    ships.push(ship);\n  }\n  return ships;\n}\n\nexport default makeShips;\n","// create Players to access attack functionality\nimport Player from \"./Factories/Player\";\nimport Board from \"./Factories/Board\";\nimport makeShips from \"./Helpers/makeShips\";\n\nlet player = Player('Player');\nlet computer = Player('Computer');\n\n// make boards for players\nlet playerBoard = Board();\nlet computerBoard = Board();\n\n// make ships for players\nlet playerShips = makeShips();\nlet computerShips = makeShips();\n\n// place ships on the respective player's board\nplayerBoard.placeAllShips(playerShips);\ncomputerBoard.placeAllShips(computerShips);\n\n// Update players with their respective boards and ships\nplayer.board = playerBoard;\nplayer.ships = playerBoard.ships;\n\ncomputer.board = computerBoard;\ncomputer.ships = computerBoard.ships;\n\nexport {player, computer}\n","import React, {useState, createContext} from 'react';\nimport {computer, player} from \"./Players\";\n\n// The board initially has no ships, so initialize to undefined\nlet initialValues = [];\nfor(let i = 0; i < 100; i ++) initialValues.push(undefined);\n\nconst PlayersContext = createContext();\n\nconst PlayersProvider = (props) => {\n  const [boardValues, setBoardValues] = useState(\n    {\n      [player.name]: initialValues,\n      [computer.name]: initialValues\n    })\n\n  return(\n    <PlayersContext.Provider value={[boardValues, setBoardValues]}>\n      {props.children}\n    </PlayersContext.Provider>\n  )\n}\n\nexport {PlayersContext, PlayersProvider}\n","function isValidPosition(hit, direction, position) {\n    // check if the position is on the board\n    if(position < 0 || position > 99) return;\n\n    // check if on the same row, because rows are wrapped\n    if(direction === 'left' || direction === 'right') {\n        const hitRow = Math.floor(hit / 10);\n        const positionRow = Math.floor(position / 10);\n        if(hitRow !== positionRow) return;\n    }\n\n    return true;\n}\n\nfunction getPositionBasedOnHit(hit, direction, board) {\n    let position;\n    switch (direction) {\n        case 'up':\n            position = hit - 10;\n            break;\n\n        case 'down':\n            position = hit + 10;\n            break;\n\n        case 'left':\n            position = hit - 1;\n            break;\n\n        case 'right':\n            position = hit + 1;\n            break;\n\n        default:\n            console.log('wrong value used for direction');\n    }\n\n    console.log(position);\n    if (isValidPosition(hit, direction, position)) {\n        // check if position has already been hit, if so, it means\n        //  we are starting to traverse back on the ship towards\n        // the initial hit position, we need to cross all the way back\n        // to the initial position and cross further to see if we got\n        // all of the ship\n        while(board.isPositionHit(position)) {\n            position = getPositionBasedOnHit(position, direction, board);\n        }\n\n        // We previously attacked a possition adjacent to ship that missed\n        // We need to update this miss now, so we don't travel in that direction\n        if(board.isPositionMiss(position)) {\n            return;\n        }\n        return position;\n    }\n}\n\n\nfunction getRandomPosition(board) {\n    let position = Math.floor(Math.random() * 100);\n    while(board.isPositionAttacked(position)) {\n        position = Math.floor(Math.random() * 100);\n    }\n    return position;\n}\n\n\nconst computerAttack = (() => {\n    let hit;\n    let directions = ['up', 'down', 'left', 'right'];\n\n    const updateHits = (position) => {\n        hit = position;\n    }\n\n    const updateMiss = () => {\n        // A miss is irrelevant if there was no hit just before\n        if (!hit) return;\n\n        // If there is a miss, it means we tried one of the directions\n        // right after a hit and missed, so we need to check other directions\n        directions.shift();\n\n        // If we've checked in all directions, it means we got all of the ship\n        // reset variables for next hit\n        if (directions.length === 0) {\n            hit = undefined;\n            directions = ['up', 'down', 'left', 'right'];\n        }\n    }\n\n    const getAttackPosition = (board) => {\n        if (hit) {\n            // get a valid position i.e on board and on same column for\n            // vertical ships, same row for horizontal ships\n            let position = getPositionBasedOnHit(hit, directions[0], board);\n\n            // If there is no valid position in this direction, check\n            // next direction\n            while (!position) {\n                directions.shift();\n                if (directions.length === 0) {\n                    hit = undefined;\n                    directions = ['up', 'down', 'left', 'right'];\n                    return getRandomPosition(board);\n                }\n                position = getPositionBasedOnHit(hit, directions[0], board);\n            }\n            return position;\n        }\n        return getRandomPosition(board);\n    }\n    return {getAttackPosition, updateMiss, updateHits}\n})()\n\nexport default computerAttack;\n","import React, {useContext} from \"react\";\nimport \"./PlayArea.css\";\n\nimport GameBoardContainer from \"./GameBoardContainer\";\nimport dragFunctions from \"../Helpers/dragFunctions\";\nimport {computer, player} from \"../Players\";\nimport {PlayersContext} from \"../PlayersContext\";\nimport computerAttack from \"../Helpers/computerAttack\";\n\n// The initial turn is of player\nlet turn = player;\nlet attackResult;\nlet winner;\n\nfunction PlayArea() {\n\n  const [boardValues, setBoardValues] = useContext(PlayersContext);\n  console.log(boardValues, setBoardValues);\n\n  function attack(player, opponent, position) {\n    if(turn === opponent) return;\n    player.attack(opponent, position);\n\n    // attackResult = opponent.board.isPositionHit((position));\n\n    // For computer, we need to update hits and misses, so it can remember them\n    // and use it to attack more intelligently next time like humans do!\n    if(player === computer) {\n      if(attackResult) {\n        computerAttack.updateHits(position);\n      } else {\n        computerAttack.updateMiss();\n      }\n    }\n\n    // If this attack sinks all ships, player won!\n    if(opponent.board.areAllShipsSunk()) {\n      winner = player;\n    }\n\n    turn = opponent;\n\n    setBoardValues(boardValues => {\n      const newBoardValues = {};\n      newBoardValues[player.name] = boardValues[player.name];\n      newBoardValues[opponent.name] = opponent.board.boardValues.slice();\n\n      return newBoardValues;\n    });\n  }\n\n  function playRound(event) {\n    // Don't play anymore if anyone wins\n    // if(winner) return;\n\n    // player's attack on computer\n    let position = event.target.getAttribute('data-key');\n    // Don't allow player to attack same cell twice\n    if (computer.board.isPositionAttacked(position)) return;\n    attack(player, computer, position);\n\n    console.log(turn);\n\n    // computer's attack on player\n    position = computerAttack.getAttackPosition(player.board);\n    setTimeout(() => attack(computer, player, position), 1000);\n    console.log(turn);\n  }\n\n  return (\n    <div className=\"play-area\">\n      <GameBoardContainer\n        turn={turn}\n        player={player}\n        boardValues={boardValues[player.name]}\n        ships={player.ships}\n        playRound={null}\n        dragFunctions={dragFunctions}\n      />\n\n      <GameBoardContainer\n        turn={turn}\n        player={computer}\n        boardValues={boardValues[computer.name]}\n        ships={computer.ships}\n        playRound={playRound}\n        dragFunctions={null}\n      />\n    </div>\n  )\n}\n\nexport default PlayArea;\n","import React, {useState} from \"react\";\nimport './Main.css';\n\nimport GameRibbon from \"./GameRibbon\";\nimport PlayArea from \"./PlayArea\";\nimport computerAttack from \"../Helpers/computerAttack\";\nimport {computer, player} from \"../Players\";\n\n// The board initially has no ships, so initialize to undefined\nlet initialValues = [];\nfor(let i = 0; i < 100; i ++) initialValues.push(undefined);\n\n// The initial turn is of player\nlet turn = player;\nlet attackResult;\nlet winner;\n\nconsole.log(computer.ships.forEach(ship => console.log(ship.positions)));\n\nfunction Main() {\n  const [boardValues, setBoardValues] = useState(\n    {\n      [player.name]: initialValues,\n      [computer.name]: initialValues\n    })\n\n  function attack(player, opponent, position) {\n    if(turn === opponent) return;\n    player.attack(opponent, position);\n\n    attackResult = opponent.board.isPositionHit((position));\n\n    // For computer, we need to update hits and misses, so it can remember them\n    // and use it to attack more intelligently next time like humans do!\n    if(player === computer) {\n      if(attackResult) {\n        computerAttack.updateHits(position);\n      } else {\n        computerAttack.updateMiss();\n      }\n    }\n\n    // If this attack sinks all ships, player won!\n    if(opponent.board.areAllShipsSunk()) {\n      winner = player;\n    }\n\n    turn = opponent;\n\n    setBoardValues(boardValues => {\n      const newBoardValues = {};\n      newBoardValues[player.name] = boardValues[player.name];\n      newBoardValues[opponent.name] = opponent.board.boardValues.slice();\n\n      return newBoardValues;\n    });\n  }\n\n  function playRound(event) {\n    // Don't play anymore if anyone wins\n    if(winner) return;\n\n    // player's attack on computer\n    let position = event.target.getAttribute('data-key');\n    // Don't allow player to attack same cell twice\n    if (computer.board.isPositionAttacked(position)) return;\n    attack(player, computer, position);\n\n    console.log(turn);\n\n    // computer's attack on player\n    position = computerAttack.getAttackPosition(player.board);\n    setTimeout(() => attack(computer, player, position), 1000);\n    console.log(turn);\n  }\n\n  return(\n    <main>\n      <GameRibbon turn={turn}\n                  opponent={turn === player ? computer: player}\n                  winner={winner}\n                  attackResult={attackResult}\n      />\n      <PlayArea\n        player={player}\n        computer={computer}\n        turn={turn}\n        boardValues={boardValues}\n        playRound={playRound}\n      />\n    </main>\n  )\n}\n\nexport default Main;\n","import './App.css';\nimport Main from \"./Components/Main\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faHeart} from \"@fortawesome/free-solid-svg-icons\";\n// import {faLinkedinIn, faGithub} from \"@fortawesome/free-brands-svg-icons\";\n// import {faEnvelope, faPhoneAlt} from '@fortawesome/free-solid-svg-icons'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Battleship</h1>\n      </header>\n      <Main />\n      <footer>\n        <p>Made by Chandra.</p>\n        <p>Hosted with <FontAwesomeIcon icon={faHeart} /> by github.</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {PlayersProvider} from \"./PlayersContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PlayersProvider>\n      <App />\n    </PlayersProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}